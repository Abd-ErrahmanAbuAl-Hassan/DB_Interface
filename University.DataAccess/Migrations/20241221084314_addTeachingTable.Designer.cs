// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using University.DataAccess;

#nullable disable

namespace University.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241221084314_addTeachingTable")]
    partial class addTeachingTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Teaching", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Course_id");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("Staff_id");

                    b.HasKey("CourseId", "StaffId")
                        .HasName("Teach_PK");

                    b.HasIndex("StaffId");

                    b.ToTable("Teaching", (string)null);
                });

            modelBuilder.Entity("University.DataAccess.Models.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Course_ID");

                    b.Property<string>("CourseName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Course_Name");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("LapHours")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Lap_Hours");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.HasKey("CourseId")
                        .HasName("Course_pk");

                    b.HasIndex(new[] { "CourseName" }, "Course_uq")
                        .IsUnique()
                        .HasFilter("[Course_Name] IS NOT NULL");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("University.DataAccess.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Department_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Department_Name");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("DepartmentId")
                        .HasName("Department_pk");

                    b.HasIndex(new[] { "DepartmentName" }, "Department_uq")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("University.DataAccess.Models.DepartmentCourse", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("Department_id");

                    b.Property<string>("CourseId")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Course_id");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.HasKey("DepartmentId", "CourseId")
                        .HasName("DepartmentCourses_pk");

                    b.HasIndex("CourseId");

                    b.ToTable("DepartmentCourses");
                });

            modelBuilder.Entity("University.DataAccess.Models.Employing", b =>
                {
                    b.Property<int>("FacultyId")
                        .HasColumnType("int")
                        .HasColumnName("Faculty_id");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("Department_id");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("Employee_id");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.HasKey("FacultyId", "DepartmentId", "EmployeeId")
                        .HasName("Employing_PK");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Employing", (string)null);
                });

            modelBuilder.Entity("University.DataAccess.Models.Enrollment", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("Student_id");

                    b.Property<string>("CourseId")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Course_id");

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.HasKey("StudentId", "CourseId")
                        .HasName("Enrollments_pk");

                    b.HasIndex("CourseId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("University.DataAccess.Models.Faculty", b =>
                {
                    b.Property<int>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Faculty_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacultyId"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Faculty_Name");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("phone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("FacultyId")
                        .HasName("Faculty_pk");

                    b.HasIndex(new[] { "Email" }, "Faculty_Email_uq")
                        .IsUnique();

                    b.HasIndex(new[] { "Location" }, "Faculty_Location_uq")
                        .IsUnique();

                    b.HasIndex(new[] { "FacultyName" }, "Faculty_Name_uq")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "Faculty_phone_uq")
                        .IsUnique();

                    b.ToTable("Faculty", (string)null);
                });

            modelBuilder.Entity("University.DataAccess.Models.Staff", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Employee_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("First_Name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Last_Name");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("SSN");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("EmployeeId")
                        .HasName("Staff_pk");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("University.DataAccess.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Student_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("address");

                    b.Property<DateOnly>("BirthOfDate")
                        .HasColumnType("date");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("EnrollYear")
                        .HasColumnType("date")
                        .HasColumnName("enrollYear");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int")
                        .HasColumnName("Faculty_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("First_Name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Last_Name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("phone");

                    b.Property<string>("Ssn")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("SSN");

                    b.HasKey("StudentId")
                        .HasName("Students_PK");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex(new[] { "Ssn" }, "Students_SSN")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "Students_email_uq")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "Students_phone_uq")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("University.DataAccess.Models.Teaching", b =>
                {
                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("CourseId")
                        .HasColumnType("varchar(6)");

                    b.HasKey("StaffId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Teachings");
                });

            modelBuilder.Entity("Teaching", b =>
                {
                    b.HasOne("University.DataAccess.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("Teach_C_FK");

                    b.HasOne("University.DataAccess.Models.Staff", null)
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("Teach_S_FK");
                });

            modelBuilder.Entity("University.DataAccess.Models.DepartmentCourse", b =>
                {
                    b.HasOne("University.DataAccess.Models.Course", "Course")
                        .WithMany("DepartmentCourses")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("DepartmentCourses_FK");

                    b.HasOne("University.DataAccess.Models.Department", "Department")
                        .WithMany("DepartmentCourses")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("DepartmentCourses_D_FK");

                    b.Navigation("Course");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("University.DataAccess.Models.Employing", b =>
                {
                    b.HasOne("University.DataAccess.Models.Department", "Department")
                        .WithMany("Employings")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("Employing_D_FK");

                    b.HasOne("University.DataAccess.Models.Staff", "Employee")
                        .WithMany("Employings")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("Employing_S_FK");

                    b.HasOne("University.DataAccess.Models.Faculty", "Faculty")
                        .WithMany("Employings")
                        .HasForeignKey("FacultyId")
                        .IsRequired()
                        .HasConstraintName("Employing_F_FK");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("University.DataAccess.Models.Enrollment", b =>
                {
                    b.HasOne("University.DataAccess.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("Enrollments_C_FK");

                    b.HasOne("University.DataAccess.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("Enrollments_S_FK");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("University.DataAccess.Models.Student", b =>
                {
                    b.HasOne("University.DataAccess.Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University.DataAccess.Models.Faculty", "Faculty")
                        .WithMany("Students")
                        .HasForeignKey("FacultyId")
                        .IsRequired()
                        .HasConstraintName("Students_FK");

                    b.Navigation("Department");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("University.DataAccess.Models.Teaching", b =>
                {
                    b.HasOne("University.DataAccess.Models.Course", "Course")
                        .WithMany("Teaching")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("University.DataAccess.Models.Staff", "Staff")
                        .WithMany("Teaching")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("University.DataAccess.Models.Course", b =>
                {
                    b.Navigation("DepartmentCourses");

                    b.Navigation("Enrollments");

                    b.Navigation("Teaching");
                });

            modelBuilder.Entity("University.DataAccess.Models.Department", b =>
                {
                    b.Navigation("DepartmentCourses");

                    b.Navigation("Employings");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("University.DataAccess.Models.Faculty", b =>
                {
                    b.Navigation("Employings");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("University.DataAccess.Models.Staff", b =>
                {
                    b.Navigation("Employings");

                    b.Navigation("Teaching");
                });

            modelBuilder.Entity("University.DataAccess.Models.Student", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
